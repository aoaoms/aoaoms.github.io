(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{289:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#开篇"}},[t._v("开篇")])]),a("li",[a("a",{attrs:{href:"#关于此篇"}},[t._v("关于此篇")])]),a("li",[a("a",{attrs:{href:"#动手前的准备"}},[t._v("动手前的准备")])]),a("li",[a("a",{attrs:{href:"#修改proxy代理"}},[t._v("修改proxy代理")])]),a("li",[a("a",{attrs:{href:"#接口规格匹配一致"}},[t._v("接口规格匹配一致")])]),a("li",[a("a",{attrs:{href:"#完结"}},[t._v("完结")])]),a("li",[a("a",{attrs:{href:"#友链"}},[t._v("友链")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"开篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开篇","aria-hidden":"true"}},[t._v("#")]),t._v(" 开篇")]),t._v(" "),a("p",[t._v("作者最近在使用"),a("a",{attrs:{href:"https://github.com/aoaoms/vue-element-admin",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-element-admin"),a("OutboundLink")],1),t._v(" 框架写一个电商后台管理系统；前端初级学员一枚。希望借此框架的具体实践，能够对于前端开发技能有进一步的提高。这个框架确实挺好的，开源并持续维护了几年了。"),a("a",{attrs:{href:"https://github.com/aoaoms/vue-element-admin",target:"_blank",rel:"noopener noreferrer"}},[t._v("github"),a("OutboundLink")],1),t._v(" star也是杠杠的！欢迎支持，为作者点赞！")]),t._v(" "),a("h2",{attrs:{id:"关于此篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于此篇","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于此篇")]),t._v(" "),a("p",[t._v("前一篇介绍了初步运行此框架模板应用，了解了从登录到菜单路由导航的概要实现。动态路由很好的运用于系统鉴权的实现。而此篇，目标是要完成实时接口访问后端开发环境，用联调接口的方式来继续后面的开发。由于，作者本人后端使用"),a("a",{attrs:{href:"http://www.jfinal.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JFinal"),a("OutboundLink")],1),t._v("技术栈 主要完成后排的API 服务，开发接口速度之快，使得联调接口更加的方便实现；数据更加的贴合实际。目标：")]),t._v(" "),a("ul",[a("li",[t._v("配置代理完成前端axios请求转发到后端测试接口")]),t._v(" "),a("li",[t._v("完成登录、获取用户信息、获取用户权限、动态路由加载导航菜单流程")])]),t._v(" "),a("h2",{attrs:{id:"动手前的准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动手前的准备","aria-hidden":"true"}},[t._v("#")]),t._v(" 动手前的准备")]),t._v(" "),a("p",[t._v("还是要看下框架作者写的几篇上手手册"),a("a",{attrs:{href:"https://juejin.im/post/59097cd7a22b9d0065fb61d2",target:"_blank",rel:"noopener noreferrer"}},[t._v("手摸手，带你用vue撸后台"),a("OutboundLink")],1),t._v(" ；感谢作者，前端的老鸟。其中"),a("a",{attrs:{href:"https://juejin.im/post/595b4d776fb9a06bbe7dba56",target:"_blank",rel:"noopener noreferrer"}},[t._v("第四篇"),a("OutboundLink")],1),t._v(" 简单的说了下使用webpack 的proxy实现跨域请求转发。当然，我们自己也可以想一想。框架不可能做到与你后台实际的接口规范一致，里面涉及了一些硬编码还需要自己依据实际项目接口做调整。下面，我们就一步步做起来。")]),t._v(" "),a("h2",{attrs:{id:"修改proxy代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改proxy代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改proxy代理")]),t._v(" "),a("p",[t._v("文件路径：./vue.config.js ;我按照自己项目后台的服务地址http://localhost 做了以下修改：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("proxy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// process.env.VUE_APP_BASE_API ---------\x3e  /dev-api")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// change xxx-api/login => mock/login")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// detail: https://cli.vuejs.org/config/#devserver-proxy")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VUE_APP_BASE_API")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        changeOrigin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        pathRewrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VUE_APP_BASE_API")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("blockquote",[a("p",[t._v("上面的process.env.VUE_APP_BASE_API 是前端项目的开发服务地址 实际上是一个字串'dev-api'；项目里面定义了2个环境编码，一个是开发的，一个是生产的，以编码标记 后续打包用到。项目开发地址在此配置文件里面也有说明，默认开启本机9528端口。\n而我后台的开发服务地址是本机80端口，所以在目标target属性里面改为 'http://localhost'; 上面的配置意思为：所有/dev-api 的请求地址会转发到http://localhost ;也就是原始请求地址是 http://localhost:9528/dev-api/****** 修改后变为 http://localhost/dev-api 。下面的pathRewrite 再配置重写地址为将/dev-api替换为空字符，那么代理后的地址就变成了 http://localhost/你的请求地址。这就与我们后端开发的服务接口一样啦。")])]),t._v(" "),a("h2",{attrs:{id:"接口规格匹配一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口规格匹配一致","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口规格匹配一致")]),t._v(" "),a("p",[t._v("框架自己硬编码的地址、参数和请求拦截处理可能与你的后台地址不一样，这里需要改下。例如本人的登录接口地址为/login/dologin ；框架里面的是/user/login 。这就需要改改了。重要的一点，就是请求的响应拦截处理。本人在修改了接口后，登录还是一致报错，后来发现是框架封装了axios请求响应，其封装的逻辑与本人后端的接口服务响应规范不一致，处罚了异常。\n框架的请求响应封装如下：文件：./src/utils/request.js")]),t._v(" "),a("div",{staticClass:"language-js{ 4 } line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("response => {\n    const res = response.data\n\n    // if the custom code is not 20000, it is judged as an error.\n\n    // i used jfinal Ret,it is juged as an error if return state is not 'ok' or http response status is not 200\n    // if (res.code !== 20000) {\n    if ((res.state !== 'ok') || (response.status !== 200)) {\n      Message({\n        message: res.message || 'Error',\n        type: 'error',\n        duration: 5 * 1000\n      })\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("blockquote",[a("p",[t._v("以上代码，我做了修改。框架原来封装响应处理做了硬编码 返回值不等于20000 的异常处理。而我的项目请求响应存在2种情况，一种是响应一个对象字串，其中包括状态state说明。另一种是直接响应http status=200,返回json数据。\n所以，这里我改了判断异常的条件。")])]),t._v(" "),a("p",[t._v("我看了下登录这块儿大致有以下几点，需要注意调整：")]),t._v(" "),a("ul",[a("li",[t._v("接口地址匹配")]),t._v(" "),a("li",[t._v("接口参数（框架封装了请求 里面包含header固定传参token处理并且属性名为X-Token；注意与自己项目使用是否一致）")]),t._v(" "),a("li",[t._v("响应封装修改")]),t._v(" "),a("li",[t._v("响应的数据格式写入(主要是提交请求后 你自己项目的返回数据需要与框架里面调用并处理token配合调整)")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("............. 明天继续")]),t._v(" "),a("h2",{attrs:{id:"完结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完结","aria-hidden":"true"}},[t._v("#")]),t._v(" 完结")]),t._v(" "),a("h2",{attrs:{id:"友链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#友链","aria-hidden":"true"}},[t._v("#")]),t._v(" 友链")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.jfinal.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jfinal"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://github.com/aoaoms/vue-element-admin",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-element-admin"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);